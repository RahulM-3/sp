import os
import librosa
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score

def extract_features(file_path):
    y, sr = librosa.load(file_path, sr=None)
    if len(y) < 2048:
        y = np.pad(y, (0, 2048 - len(y)), mode='constant')  # Pad with zeros to length 2048
    mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)  # n_fft=2048 by default
    return np.mean(mfccs.T, axis=0)

data_dir = "C:\\Users\\24ai\\Downloads\\free-spoken-digit-dataset-master\\free-spoken-digit-dataset-master\\recordings"

X, y = [], []

for filename in os.listdir(data_dir):
    if filename.endswith('.wav'):
        # Filename example: '0_jackson_0.wav'
        speaker = filename.split('_')[1]  # 'jackson' is the speaker name
        file_path = os.path.join(data_dir, filename)
        features = extract_features(file_path)
        X.append(features)
        y.append(speaker)

le = LabelEncoder()
y_encoded = le.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.3, random_state=42)

knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train, y_train)

y_pred = knn.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))

# Predict a sample
# new_sample = extract_features('recordings/0_jackson_0.wav')
# print("Predicted speaker:", le.inverse_transform(knn.predict([new_sample]))[0])
